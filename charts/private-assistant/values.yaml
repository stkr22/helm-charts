clusterDomain: "cluster.local"


globalEnv:
  - name: TZ
    value: Europe/Berlin

ttsEngine:
  image:
    repository: ghcr.io/stkr22/tts-batch-api-py
    pullPolicy: IfNotPresent
    tag: "2.3.1"
    pullSecret: ""
  replicas: 1
  config:
    ttsModel: en_US-kathleen-low
    allowedUserToken: DEBUG
  resources: {}
  service:
    type: ClusterIP
  securityContext:
    capabilities:
      drop:
        - ALL
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    privileged: false
    seccompProfile:
      type: RuntimeDefault

bridge:
  image:
    repository: ghcr.io/stkr22/private-assistant-comms-bridge-py
    pullPolicy: IfNotPresent
    tag: "1.2.0"
    pullSecret: ""
  replicas: 1
  config: |
    speech_transcription_api: "http://127.0.0.1:8080/transcribe"
    speech_transcription_api_token: "DEBUG"
  resources: {}
  service:
    type: ClusterIP
  ingress:
    enable: true
    className: "traefik"
    annotations: {}
    hosts:
      - host: api.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  securityContext:
    capabilities:
      drop:
        - ALL
    runAsUser: 0
    runAsGroup: 0
    runAsNonRoot: false
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    privileged: false
    seccompProfile:
      type: RuntimeDefault

intentEngine:
  image:
    repository: ghcr.io/stkr22/private-assistant-intent-engine-py
    pullPolicy: IfNotPresent
    tag: "0.0.2"
    pullSecret: ""
  config: |
    client_id: "intent_engine"
  resources: {}

skills:
  activeSkills: []
    # - name: "curtain-skill"
    #   config:
    #     client_id: "curtain_skill"
    #   image:
    #     repository: "ghcr.io/stkr22/private-assistant-curtain-skill-py"
    #     pullPolicy: IfNotPresent
    #     tag: "0.1.4"
    #   configSecretName: MySecret
    #   resources: {}

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  fsGroup: 1000
  fsGroupChangePolicy: OnRootMismatch
  supplementalGroups:
    - 1000

securityContext:
  capabilities:
    drop:
      - ALL
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  privileged: false
  seccompProfile:
    type: RuntimeDefault

mosquitto:
  enabled: true
  nodeport:
    enabled: true
  service:
    ports:
      mqtt:
        port: 1883  # Default MQTT port
  serviceHostOverwrite: ""  # Optional: Provide a custom MQTT server host
  servicePortOverwrite: ""  # Optional: Provide a custom MQTT server port


postgresql:
  enabled: true
  global:
    postgresql:
      auth:
        username: assistant
        database: assistant
        password: assistant
        postgresPassword: postgres
