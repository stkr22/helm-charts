clusterDomain: "cluster.local"


globalEnv:
  - name: TZ
    value: Europe/Berlin

ttsEngine:
  image:
    repository: ghcr.io/stkr22/tts-batch-api-py:4.0.1
    pullPolicy: IfNotPresent
    pullSecret: ""
  replicas: 1
  config:
    ttsModel: en_US-kathleen-low.onnx
    allowedUserToken: DEBUG
    enableCache: true
    cacheTTL: 604800
  resources: {}
  service:
    type: ClusterIP
  securityContext:
    capabilities:
      drop:
        - ALL
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    privileged: false
    seccompProfile:
      type: RuntimeDefault

bridge:
  image:
    repository: ghcr.io/stkr22/private-assistant-comms-bridge-py:2.0.1
    pullPolicy: IfNotPresent
    pullSecret: ""
  replicas: 1
  config: |
    speech_transcription_api: "http://127.0.0.1:8080/transcribe"
    speech_transcription_api_token: "DEBUG"
  resources: {}
  service:
    type: ClusterIP
  ingress:
    enable: true
    className: "traefik"
    annotations: {}
    hosts:
      - host: api.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  securityContext:
    capabilities:
      drop:
        - ALL
    runAsUser: 0
    runAsGroup: 0
    runAsNonRoot: false
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    privileged: false
    seccompProfile:
      type: RuntimeDefault

intentEngine:
  image:
    repository: ghcr.io/stkr22/private-assistant-intent-engine-py:0.4.2
    pullPolicy: IfNotPresent
    pullSecret: ""
  config: |
    client_id: "intent_engine"
  securityContext:
    capabilities:
      drop:
        - ALL
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    privileged: false
    seccompProfile:
      type: RuntimeDefault
  resources: {}

skills:
  globalEnv:
    - name: POSTGRES_USER
      valueFrom:
        secretKeyRef:
          name: private-assistant-postgres-app
          key: username
    - name: POSTGRES_DB
      valueFrom:
        secretKeyRef:
          name: private-assistant-postgres-app
          key: database
    - name: POSTGRES_HOST
      valueFrom:
        secretKeyRef:
          name: private-assistant-postgres-app
          key: host
    - name: POSTGRES_PORT
      valueFrom:
        secretKeyRef:
          name: private-assistant-postgres-app
          key: port
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: private-assistant-postgres-app
          key: password
  securityContext:
    capabilities:
      drop:
        - ALL
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    privileged: false
    seccompProfile:
      type: RuntimeDefault
  activeSkills: []
    # - name: "curtain-skill"
    #   config:
    #     client_id: "curtain_skill"
    #   image:
    #     repository: "ghcr.io/stkr22/private-assistant-curtain-skill-py:0.1.4"
    #     pullPolicy: IfNotPresent
    #   configSecretName: MySecret
    #   resources: {}

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  fsGroup: 1001
  fsGroupChangePolicy: OnRootMismatch
  supplementalGroups:
    - 1001

securityContext:
  capabilities:
    drop:
      - ALL
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  privileged: false
  seccompProfile:
    type: RuntimeDefault

mosquitto:
  enabled: true
  nodeport:
    enabled: true
  service:
    ports:
      mqtt:
        port: 1883  # Default MQTT port
  serviceHostOverwrite: ""  # Optional: Provide a custom MQTT server host
  servicePortOverwrite: ""  # Optional: Provide a custom MQTT server port


redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true  # Enable password authentication
    password: "redis23password"  # Be sure to change this

  persistence:
    enabled: true
    size: 1Gi

  # Resources limits - adjust based on your needs
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m
